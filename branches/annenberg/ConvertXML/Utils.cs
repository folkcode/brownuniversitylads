using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.IO;

namespace ConvertXML
{
    public static class Utils
    {
        //Used to store temporary sanitized xml file
        private static string tempXmlPath = "C:/Yudi/temp.xml";

        /// <summary>
        /// Remove illegal XML characters from the given xml file and save to a temp file
        /// </summary>
        /// <param name="filePath"></param>
        /// <returns>The path to the temporary sanitized xml file.</returns>
        public static string SanitizeXmlFile(string filePath)
        {
            StreamReader streamReader = new StreamReader(filePath);
            StreamWriter writer = new StreamWriter(tempXmlPath);

            //process a small chunk of xml at a time to avoid OutOfMemoryException
            char[] buffer = new char[1024 * 1024];
            int position = 0;
            int charsRead = 0;
            while ((charsRead = streamReader.Read(buffer, 0, buffer.Length)) > 0)
            {
                string contentToProcess = new string(buffer, 0, charsRead);
                contentToProcess = Utils.SanitizeXmlString(contentToProcess);
                writer.Write(contentToProcess);
                position += charsRead;
            }

            writer.Close();
            return tempXmlPath;
        }

        /// <summary>
        /// Clean up temporary files generated by the program. 
        /// Should be called once by the end of the program.
        /// </summary>
        public static void CleanUpTempFiles()
        {
            File.Delete(tempXmlPath);
        }

        /// <summary>
        /// Remove illegal XML characters from a string.
        /// </summary>
        public static string SanitizeXmlString(string xml)
        {
            if (xml == null)
            {
                throw new ArgumentNullException("xml");
            }
            StringBuilder buffer = new StringBuilder(xml.Length);
            foreach (char c in xml)
            {
                if (IsLegalXmlChar(c))
                {
                    buffer.Append(c);
                }
            }
            return buffer.ToString();
        }

        /// <summary>
        /// Whether a given character is allowed by XML 1.0.
        /// </summary>
        private static bool IsLegalXmlChar(int character)
        {
            return
            (
                 character == 0x9 /* == '\t' == 9   */          ||
                 character == 0xA /* == '\n' == 10  */          ||
                 character == 0xD /* == '\r' == 13  */          ||
                (character >= 0x20 && character <= 0xD7FF) ||
                (character >= 0xE000 && character <= 0xFFFD) ||
                (character >= 0x10000 && character <= 0x10FFFF)
            );
        }
    }
}
